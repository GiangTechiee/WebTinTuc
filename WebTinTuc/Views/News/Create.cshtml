@model WebTinTuc.Models.Entities.News

@{
    ViewData["Title"] = "Thêm bài viết mới";
}

<div class="container py-4">
    <h1 class="mb-4">Thêm bài viết mới</h1>

    <form id="createNewsForm" enctype="multipart/form-data">
        @Html.AntiForgeryToken()
        <div class="row g-3">
            <div class="col-12">
                <div class="form-floating">
                    <input asp-for="Title" class="form-control" required maxlength="255" />
                    <label asp-for="Title">Tiêu đề</label>
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
            </div>

            <div class="col-12">
                <div class="form-floating">
                    <textarea asp-for="Abstract" class="form-control" required maxlength="500" style="height: 100px"></textarea>
                    <label asp-for="Abstract">Tóm tắt</label>
                    <span asp-validation-for="Abstract" class="text-danger"></span>
                </div>
            </div>

            <div class="col-12">
                <div class="form-floating">
                    <textarea asp-for="Content" class="form-control" required style="height: 200px"></textarea>
                    <label asp-for="Content">Nội dung</label>
                    <span asp-validation-for="Content" class="text-danger"></span>
                </div>
            </div>

            <div class="col-12">
                <div class="mb-3">
                    <label for="imageFile" class="form-label">Hình ảnh</label>
                    <input type="file" class="form-control" id="imageFile" name="imageFile" accept="image/*" required />
                    <div id="imagePreview" class="mt-2"></div>
                    <span id="imageFileError" class="text-danger"></span> <!-- Thông báo lỗi cho hình ảnh -->
                </div>
            </div>

            <!-- Dropdown danh mục -->
            <div class="col-12">
                <div class="mb-3">
                    <label for="categoryDropdown" class="form-label">Danh mục</label>
                    <select id="categoryDropdown" class="form-control custom-dropdown">
                        <option value="" disabled selected>Chọn danh mục</option>
                        @foreach (var category in ViewBag.Categories)
                        {
                            <option value="@category.CategoryId" data-name="@category.CategoryName">@category.CategoryName</option>
                        }
                    </select>
                    <div id="selectedCategories" class="mt-2"></div>
                    <input type="hidden" id="categoryIds" name="categoryIds" />
                    <span id="categoryIdsError" class="text-danger"></span>
                </div>
            </div>

            <div class="col-12">
                <button type="submit" class="btn btn-primary w-100">Đăng bài</button>
            </div>
        </div>
    </form>

    <div id="messageContainer" class="mt-3"></div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.getElementById('createNewsForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const form = this;
            const imageFileInput = document.getElementById('imageFile');
            const imageFileError = document.getElementById('imageFileError');
            const messageContainer = document.getElementById('messageContainer');
            const categoryIdsInput = document.getElementById('categoryIds'); 
            const categoryIdsError = document.getElementById('categoryIdsError');

            // Kiểm tra xem có chọn ảnh không
            if (!imageFileInput.files || imageFileInput.files.length === 0) {
                imageFileError.textContent = 'Hình ảnh là bắt buộc';
                return; // Ngăn gửi form nếu không có ảnh
            } else {
                imageFileError.textContent = ''; // Xóa thông báo lỗi nếu có ảnh
            }

            // Lấy danh sách categoryIds từ các thẻ đã chọn
            const selectedCategories = Array.from(document.querySelectorAll('#selectedCategories .category-tag'))
                .map(tag => tag.dataset.id);
            if (selectedCategories.length === 0) {
                categoryIdsError.textContent = 'Vui lòng chọn ít nhất một danh mục';
                return;
            } else {
                categoryIdsError.textContent = '';
            }

            // Cập nhật giá trị categoryIds vào input ẩn
            categoryIdsInput.value = selectedCategories.join(',');

            const formData = new FormData(form);

            try {
                const response = await fetch('@Url.Action("Create", "News")', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (!response.ok) {
                    throw new Error(`Server trả về mã lỗi ${response.status}`);
                }

                const result = await response.json();

                if (result.success) {
                    messageContainer.innerHTML = `
                        <div class="alert alert-success" role="alert">
                            ${result.message}
                        </div>`;
                    form.reset();
                    document.getElementById('imagePreview').innerHTML = '';
                    document.getElementById('selectedCategories').innerHTML = '';
                    categoryIdsInput.value = '';
                }
            } catch (error) {
                console.error('Chi tiết lỗi:', error);
                // Không hiển thị lỗi ở messageContainer
            }
        });

        // Image preview
        document.getElementById('imageFile').addEventListener('change', function (e) {
            const preview = document.getElementById('imagePreview');
            const imageFileError = document.getElementById('imageFileError');
            preview.innerHTML = '';

            if (e.target.files && e.target.files[0]) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    preview.innerHTML = `<img src="${e.target.result}" class="img-fluid rounded" style="max-height: 200px;">`;
                }
                reader.readAsDataURL(e.target.files[0]);
                imageFileError.textContent = ''; // Xóa thông báo lỗi khi chọn ảnh
            } else {
                imageFileError.textContent = 'Hình ảnh là bắt buộc'; // Hiển thị lỗi nếu bỏ chọn ảnh
            }
        });


        // Xử lý dropdown danh mục
        const categoryDropdown = document.getElementById('categoryDropdown');
        const selectedCategoriesContainer = document.getElementById('selectedCategories');

        categoryDropdown.addEventListener('change', function () {
            const selectedOption = this.options[this.selectedIndex];
            const categoryId = selectedOption.value;
            const categoryName = selectedOption.dataset.name;

            // Kiểm tra xem danh mục đã được chọn chưa
            if (categoryId && !document.querySelector(`.category-tag[data-id="${categoryId}"]`)) {
                const categoryTag = document.createElement('span');
                categoryTag.className = 'category-tag badge bg-secondary me-1 mb-1';
                categoryTag.dataset.id = categoryId;
                categoryTag.innerHTML = `
                    ${categoryName}
                    <span class="remove-category ms-1" style="cursor: pointer;">×</span>
                `;
                selectedCategoriesContainer.appendChild(categoryTag);

                // Xử lý nút xóa
                categoryTag.querySelector('.remove-category').addEventListener('click', function () {
                    categoryTag.remove();
                });
            }

            // Reset dropdown về giá trị mặc định
            this.value = '';
        });
    </script>

    <style>
        .form-floating > textarea {
            resize: vertical;
        }

        .category-tag {
            position: relative;
            padding: 5px 20px 5px 10px;
        }

        .remove-category {
            position: absolute;
            top: 0;
            right: 5px;
            font-size: 14px;
            line-height: 1.5;
        }

        .custom-dropdown {
            appearance: none; /* Xóa giao diện mặc định của trình duyệt */
            -webkit-appearance: none;
            -moz-appearance: none;
            background: #fff url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='10' height='5' viewBox='0 0 10 5'><path fill='%23000' d='M0 0h10L5 5z'/></svg>") no-repeat right 10px center; /* Thêm mũi tên SVG */
            background-size: 10px 5px; /* Kích thước mũi tên */
            padding-right: 30px; /* Đảm bảo nội dung không đè lên mũi tên */
            border: 1px solid #ced4da; /* Giữ viền mặc định của Bootstrap */
            border-radius: 0.25rem;
        }

        .custom-dropdown:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        @@media (max-width: 768px) {
            .btn {
                padding: 10px;
            }
        }
    </style>
}