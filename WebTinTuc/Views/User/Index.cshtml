@model IEnumerable<WebTinTuc.Models.Entities.User>

@{
    ViewData["Title"] = "Quản lý người dùng";
}

<div class="container mt-5">
    <h2 class="mb-4">Quản lý người dùng</h2>

    <!-- Nút thêm người dùng -->
    <div class="mb-3">
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#userModal" onclick="openAddUserModal()">Thêm người dùng mới</button>
    </div>

    <!-- Bảng danh sách người dùng -->
    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle" id="userTable">
            <thead class="table-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Họ và tên</th>
                    <th scope="col">Email</th>
                    <th scope="col">Số điện thoại</th>
                    <th scope="col">Vai trò</th>
                    <th scope="col">Trạng thái</th>
                    <th scope="col">Hành động</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    int index = 1;
                    @foreach (var user in Model)
                    {
                        <tr data-user-id="@user.UserId">
                            <td>@index</td>
                            <td>@user.FullName</td>
                            <td>@user.Email</td>
                            <td>@user.PhoneNumber</td>
                            <td>@user.Role?.RoleName</td>
                            <td>
                                @if (user.LockoutEnd.HasValue && user.LockoutEnd > DateTime.Now)
                                {
                                    <span class="badge bg-danger">Khóa</span>
                                }
                                else if (!user.IsEmailConfirmed)
                                {
                                    <span class="badge bg-warning">Chưa xác nhận</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">Hoạt động</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-warning" onclick="openEditUserModal(@user.UserId)">Sửa</button>
                                <button class="btn btn-sm btn-danger" onclick="openDeleteModal(@user.UserId)">Xóa</button>
                            </td>
                        </tr>
                        index++;
                    }
                }
                else
                {
                    <tr><td colspan="7" class="text-center">Không có người dùng nào.</td></tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal thêm/sửa người dùng -->
<div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userModalLabel">Thêm người dùng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="userForm">
                    <input type="hidden" id="userId" name="userId" />
                    <div class="mb-3">
                        <label for="fullName" class="form-label">Họ và tên</label>
                        <input type="text" class="form-control" id="fullName" name="fullName" required>
                        <span class="error-message text-danger" id="fullNameError"></span>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" name="email" required>
                        <span class="error-message text-danger" id="emailError"></span>
                    </div>
                    <div class="mb-3">
                        <label for="phoneNumber" class="form-label">Số điện thoại</label>
                        <input type="text" class="form-control" id="phoneNumber" name="phoneNumber" required>
                        <span class="error-message text-danger" id="phoneNumberError"></span>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Mật khẩu</label>
                        <input type="password" class="form-control" id="password" name="password">
                        <span class="error-message text-danger" id="passwordError"></span>
                    </div>
                    <div class="mb-3">
                        <label for="dateOfBirth" class="form-label">Ngày sinh</label>
                        <input type="date" class="form-control" id="dateOfBirth" name="dateOfBirth">
                    </div>
                    <div class="mb-3">
                        <label for="address" class="form-label">Địa chỉ</label>
                        <input type="text" class="form-control" id="address" name="address">
                    </div>
                    <div class="mb-3">
                        <label for="roleId" class="form-label">Vai trò</label>
                        <select class="form-control" id="roleId" name="roleId" required>
                            <option value="">Chọn vai trò</option>
                            <!-- Danh sách vai trò sẽ được điền bằng JavaScript -->
                        </select>
                        <span class="error-message text-danger" id="roleIdError"></span>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" onclick="saveUser()">Lưu</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal xác nhận xóa -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Xác nhận xóa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Bạn có chắc chắn muốn xóa người dùng này không?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentUserId = null;

        // Hàm lấy danh sách vai trò từ server
        function loadRoles(selectedRoleId = null) {
            $.get("/api/Role/getall", function (roles) {
                const roleSelect = $("#roleId");
                roleSelect.empty();
                roleSelect.append('<option value="">Chọn vai trò</option>');
                roles.forEach(role => {
                    const option = `<option value="${role.roleId}" ${role.roleId == selectedRoleId ? 'selected' : ''}>${role.roleName}</option>`;
                    roleSelect.append(option);
                });
            }).fail(function () {
                console.error("Lỗi khi tải danh sách vai trò");
                alert("Không thể tải danh sách vai trò.");
            });
        }

        // Hàm kiểm tra dữ liệu
        function validateForm() {
            let isValid = true;

            // Xóa thông báo lỗi cũ
            $(".error-message").text("");

            // Kiểm tra Họ và tên
            const fullName = $("#fullName").val().trim();
            if (!fullName || fullName.length < 2 || fullName.length > 50) {
                $("#fullNameError").text("Họ và tên phải từ 2 đến 50 ký tự.");
                isValid = false;
            }

            // Kiểm tra Email
            const email = $("#email").val().trim();
            const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]*$/;
            if (!email || !emailRegex.test(email)) {
                $("#emailError").text("Email không hợp lệ.");
                isValid = false;
            }

            // Kiểm tra Số điện thoại
            const phoneNumber = $("#phoneNumber").val().trim();
            const phoneRegex = /^(?:\+84|0)(?:3[2-9]|5[6|8|9]|7[0|6-9]|8[1-6|8|9]|9[0-4|6-9])[0-9]{7}$/;
            if (!phoneNumber || !phoneRegex.test(phoneNumber)) {
                $("#phoneNumberError").text("Số điện thoại phải là số Việt Nam hợp lệ.");
                isValid = false;
            }

            // Kiểm tra Mật khẩu (chỉ khi thêm mới)
            const password = $("#password").val();
            const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z\d]).{8,}$/;
            if (!$("#userId").val() && (!password || !passwordRegex.test(password))) {
                $("#passwordError").text("Mật khẩu phải có ít nhất 8 ký tự, gồm chữ hoa, chữ thường, số và ký tự đặc biệt.");
                isValid = false;
            }

            const roleId = $("#roleId").val();
            if (!roleId) {
                $("#roleIdError").text("Vui lòng chọn vai trò.");
                isValid = false;
            }

            return isValid;
        }

        function openAddUserModal() {
            $("#userModalLabel").text("Thêm người dùng mới");
            $("#userForm")[0].reset();
            $("#userId").val("");
            $("#password").prop("required", true);
            $(".error-message").text("");
            loadRoles();
            $("#userModal").modal("show");
        }

        function openEditUserModal(userId) {
            $.get(`/api/User/${userId}`, function (user) {
                $("#userModalLabel").text("Sửa người dùng");
                $("#userId").val(user.userId);
                $("#fullName").val(user.fullName);
                $("#email").val(user.email);
                $("#phoneNumber").val(user.phoneNumber);
                $("#dateOfBirth").val(user.dateOfBirth ? user.dateOfBirth.split('T')[0] : '');
                $("#address").val(user.address);
                $("#password").val("");
                $("#password").prop("required", false);
                $(".error-message").text("");
                loadRoles(user.fk_RoleId);
                $("#userModal").modal("show");
            }).fail(function () {
                console.error("Lỗi khi tải thông tin người dùng:", xhr.responseJSON);
                alert("Không thể tải thông tin người dùng.");
            });
        }

        function openDeleteModal(userId) {
            currentUserId = userId;
            $("#deleteModal").modal("show");
        }

        function saveUser() {
            // Kiểm tra dữ liệu trước khi gửi
            if (!validateForm()) {
                return;
            }

            const userData = {
                fullName: $("#fullName").val(),
                email: $("#email").val(),
                phoneNumber: $("#phoneNumber").val(),
                password: $("#password").val() || null,
                dateOfBirth: $("#dateOfBirth").val() || null,
                address: $("#address").val() || null,
                roleId: $("#roleId").val()
            };
            const userId = $("#userId").val();

            if (userId) {
                $.ajax({
                    url: `/api/User/update/${userId}`,
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(userData),
                    success: function (response) {
                        alert(response.message);
                        location.reload();
                    },
                    error: function (xhr) {
                        alert(xhr.responseJSON.message);
                    }
                });
            } else {
                $.ajax({
                    url: "/api/User/create",
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(userData),
                    success: function (response) {
                        alert(response.message);
                        location.reload();
                    },
                    error: function (xhr) {
                        alert(xhr.responseJSON.message);
                    }
                });
            }
        }

        $("#confirmDeleteBtn").click(function () {
            $.ajax({
                url: `/api/User/delete/${currentUserId}`,
                method: "POST",
                success: function (response) {
                    alert(response.message);
                    $(`tr[data-user-id='${currentUserId}']`).remove();
                    $("#deleteModal").modal("hide");
                    // Chuyển focus về nút "Thêm người dùng mới"
                    $('button[data-bs-target="#userModal"]').focus();
                },
                error: function (xhr) {
                    console.error("Lỗi khi xóa người dùng:", xhr.responseText);
                    alert(xhr.responseJSON?.message || "Lỗi không xác định khi xóa người dùng");
                }
            });
        });
    </script>
}

<style>
    .error-message {
        font-size: 0.9em;
        margin-top: 5px;
        display: block;
    }
</style>