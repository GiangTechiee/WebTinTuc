@model IEnumerable<WebTinTuc.Models.Entities.Category>
@{
    ViewData["Title"] = "Quản lý danh mục";
}

<div class="container mt-4">
    <h2 class="mb-4">Quản lý danh mục</h2>

    <!-- Nút thêm danh mục -->
    <button class="btn btn-primary mb-3" id="createCategoryBtn" onclick="loadCreateModal(this)">Thêm danh mục</button>

    <!-- Bảng danh sách danh mục -->
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Tên danh mục</th>
                    <th>Mô tả</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Model)
                {
                    <tr>
                        <td>@category.CategoryId</td>
                        <td>@category.CategoryName</td>
                        <td>@category.Description</td>
                        <td>
                            <button class="btn btn-warning btn-sm" onclick="loadEditModal(this, @category.CategoryId)">Sửa</button>
                            <button class="btn btn-danger btn-sm" onclick="loadDeleteModal(this, @category.CategoryId)">Xóa</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Modal container -->
    <div id="modalContainer"></div>
</div>

@section Scripts {
    <script>
        let lastTriggerButton = null; // Lưu nút kích hoạt modal

        // Load modal thêm danh mục
        function loadCreateModal(triggerButton) {
            lastTriggerButton = triggerButton;
            fetch('@Url.Action("Create", "Category")')
                .then(response => {
                    if (!response.ok) throw new Error('Không thể tải modal');
                    return response.text();
                })
                .then(data => {
                    const container = document.getElementById('modalContainer');
                    container.innerHTML = ''; // Xóa nội dung cũ để tránh xung đột
                    container.innerHTML = data;
                    const modalElement = container.querySelector('#createCategoryModal');
                    if (modalElement) {
                        const modal = new bootstrap.Modal(modalElement, { keyboard: true });
                        modal.show();
                        modalElement.addEventListener('shown.bs.modal', () => {
                            const focusTarget = modalElement.querySelector('#categoryName');
                            if (focusTarget) focusTarget.focus();
                        }, { once: true });
                    } else {
                        console.error('Không tìm thấy #createCategoryModal trong HTML trả về');
                    }
                })
                .catch(error => console.error('Lỗi khi tải modal:', error));
        }

        // Load modal sửa danh mục
        function loadEditModal(triggerButton, id) {
            lastTriggerButton = triggerButton;
            fetch('@Url.Action("Edit", "Category")/' + id)
                .then(response => {
                    if (!response.ok) throw new Error('Không thể tải modal');
                    return response.text();
                })
                .then(data => {
                    const container = document.getElementById('modalContainer');
                    container.innerHTML = '';
                    container.innerHTML = data;
                    const modalElement = container.querySelector('#editCategoryModal');
                    if (modalElement) {
                        const modal = new bootstrap.Modal(modalElement, { keyboard: true });
                        modal.show();
                        modalElement.addEventListener('shown.bs.modal', () => {
                            const focusTarget = modalElement.querySelector('#categoryName');
                            if (focusTarget) focusTarget.focus();
                        }, { once: true });
                    } else {
                        console.error('Không tìm thấy #editCategoryModal trong HTML trả về');
                    }
                })
                .catch(error => console.error('Lỗi khi tải modal:', error));
        }

        // Load modal xóa danh mục
        function loadDeleteModal(triggerButton, id) {
            lastTriggerButton = triggerButton;
            fetch('@Url.Action("Delete", "Category")/' + id)
                .then(response => {
                    if (!response.ok) throw new Error('Không thể tải modal');
                    return response.text();
                })
                .then(data => {
                    const container = document.getElementById('modalContainer');
                    container.innerHTML = '';
                    container.innerHTML = data;
                    const modalElement = container.querySelector('#deleteCategoryModal');
                    if (modalElement) {
                        const modal = new bootstrap.Modal(modalElement, { keyboard: true });
                        modal.show();
                        modalElement.addEventListener('shown.bs.modal', () => {
                            const focusTarget = modalElement.querySelector('.btn-danger');
                            if (focusTarget) focusTarget.focus();
                        }, { once: true });
                    } else {
                        console.error('Không tìm thấy #deleteCategoryModal trong HTML trả về');
                    }
                })
                .catch(error => console.error('Lỗi khi tải modal:', error));
        }

        // Xử lý submit form trong modal
        function submitForm(event, formId, url, successMessage) {
            event.preventDefault();
            const form = document.getElementById(formId);
            const formData = new FormData(form);

            fetch(url, {
                method: 'POST',
                body: formData,
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.message);
                    location.reload();
                } else {
                    alert('Có lỗi xảy ra!');
                }
            })
            .catch(error => alert('Lỗi: ' + error.message));
        }

        // Quản lý focus khi modal đóng
        document.addEventListener('hidden.bs.modal', function (event) {
            if (lastTriggerButton) {
                setTimeout(() => {
                    lastTriggerButton.focus();
                    lastTriggerButton = null;
                }, 0); // Delay để đảm bảo DOM sẵn sàng
            }
        });
    </script>
}